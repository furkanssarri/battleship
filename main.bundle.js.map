{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://battleship/./src/components/Ship.js","webpack://battleship/./src/components/Gameboard.js","webpack://battleship/./src/components/Player.js","webpack://battleship/./src/GameController.js","webpack://battleship/./src/DomController.js","webpack://battleship/./src/AppController.js"],"sourcesContent":["export const Ship = (length, direction, startRow, startCol) => {\n   let hits = 0;\n\n   const getHits = () => hits;\n   const hit = () => {\n      ++hits;\n   };\n   const isSunk = () => hits >= length;\n   return {\n      length,\n      direction,\n      startRow,\n      startCol,\n      getHits,\n      hit,\n      isSunk,\n   };\n};\n","import { Ship } from \"./Ship\";\n\nexport const Gameboard = (size) => {\n   const board = Array.from({ length: size }, () => Array(size).fill(null));\n   const ships = [];\n\n   const getCell = (row, col) => board[row][col];\n   const hasShip = (row, col) => getCell(row, col) !== null;\n   const getAllShips = () => [...ships];\n   const isAllShipsSunken = () => ships.every((ship) => ship.isSunk());\n   const getGrid = () => board;\n\n   const getShipPositions = () =>\n      ships.map(({ startRow, startCol, length, direction }) => ({\n         startRow,\n         startCol,\n         length,\n         direction,\n      }));\n\n   const getShipIndex = (row, col) => {\n      return (\n         ships.find((ship) => {\n            const { startRow, startCol, length, direction } = ship;\n            if (direction === \"horizontal\") {\n               return row === startRow && col >= startCol && col < startCol + length;\n            } else {\n               return col === startCol && row >= startRow && row < startRow + length;\n            }\n         }) || undefined\n      );\n   };\n\n   const getShip = (row, col) => {\n      const index = board[row][col];\n      return Number.isInteger(index) ? ships[index] : undefined;\n   };\n\n   const _isValidPlacement = (row, col, length, direction) => {\n      if (direction === \"horizontal\" && col + length > size) return false;\n      if (direction === \"vertical\" && row + length > size) return false;\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         if (hasShip(newRow, newCol)) return false;\n      }\n      return true;\n   };\n\n   const placeShip = (row, col, length, direction) => {\n      if (!_isValidPlacement(row, col, length, direction)) {\n         throw new Error(\"Invalid placement: Out of bounds or overlapping.\");\n      }\n\n      const ship = Ship(length, direction, row, col);\n      const shipIndex = ships.length;\n      ships.push(ship);\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         board[newRow][newCol] = shipIndex;\n      }\n   };\n\n   const receiveAttack = (row, col) => {\n      const cell = getCell(row, col);\n      if (cell === null) {\n         board[row][col] = \"X\"; // Missed shot\n         return \"X\";\n      }\n      if (Number.isInteger(cell)) {\n         const ship = getShip(row, col);\n         if (ship) {\n            ship.hit();\n            board[row][col] = \"H\";\n            return \"H\";\n         }\n      }\n      throw new Error(\"This cell was already attacked.\");\n   };\n\n   return {\n      placeShip,\n      getCell,\n      hasShip,\n      getShip,\n      getAllShips,\n      receiveAttack,\n      isAllShipsSunken,\n      getGrid,\n      getShipPositions,\n      getShipIndex,\n   };\n};\n","import { Gameboard } from \"./Gameboard\";\n\nexport const Player = (name) => {\n   const ownBoard = Gameboard(10);\n\n   return {\n      name,\n      ownBoard,\n   };\n};\n","import { Player } from \"./components/Player\";\nimport { gameOver } from \"./AppController\";\n\nexport const player1 = Player(\"Player-1\");\n// player1.ownBoard.placeShip(4, 3, 5, \"horizontal\");\n// player1.ownBoard.placeShip(6, 4, 4, \"vertical\");\n// player1.ownBoard.placeShip(2, 1, 3, \"horizontal\");\n// player1.ownBoard.placeShip(1, 8, 2, \"vertical\");\n// player1.ownBoard.placeShip(0, 4, 3, \"horizontal\");\nplayer1.ownBoard.placeShip(8, 6, 3, \"horizontal\");\n\nexport const player2 = Player(\"Player-2\");\nplayer2.ownBoard.placeShip(0, 1, 5, \"horizontal\");\n// player2.ownBoard.placeShip(3, 2, 4, \"vertical\");\n// player2.ownBoard.placeShip(7, 5, 3, \"vertical\");\n// player2.ownBoard.placeShip(5, 5, 3, \"horizontal\");\n// player2.ownBoard.placeShip(2, 6, 2, \"horizontal\");\n// player2.ownBoard.placeShip(2, 4, 2, \"vertical\");\n\nexport const runGame = (row, col, player) => {\n   player.ownBoard.receiveAttack(row, col);\n   if (player.ownBoard.isAllShipsSunken()) gameOver();\n};\n","import { player1, player2, resolveCellEvents } from \"./GameController\";\nimport { handleCellClick } from \"./AppController\";\n\nexport const renderGameBoards = (player1, player2) => {\n   const container = document.createElement(\"div\");\n   container.classList.add(\"container\");\n\n   const player1GameboardDOM = _createGameBoardDOM(player1, handleCellClick);\n   const player2GameboardDOM = _createGameBoardDOM(player2, handleCellClick);\n   container.append(player1GameboardDOM, player2GameboardDOM);\n\n   document.getElementById(\"root\").appendChild(container);\n};\n\nfunction _createGameBoardDOM(player, callback) {\n   const size = player.ownBoard.getGrid().length;\n   const playerName = player.name;\n   const gridContainer = document.createElement(\"div\");\n   gridContainer.classList.add(\"game-board\");\n   gridContainer.id = playerName;\n\n   for (let col = 0; col < size; col++) {\n      const colElement = document.createElement(\"div\");\n      colElement.classList.add(\"column\");\n\n      for (let row = 0; row < size; row++) {\n         // Change col -> row\n         const cell = document.createElement(\"div\");\n         cell.classList.add(\"cell\");\n         cell.dataset.row = row;\n         cell.dataset.col = col;\n\n         const isOccupied = player.ownBoard.hasShip(row, col);\n         if (isOccupied) {\n            cell.classList.add(\"ship\");\n         }\n\n         cell.addEventListener(\"click\", () => callback(row, col, player));\n\n         colElement.appendChild(cell);\n      }\n\n      gridContainer.appendChild(colElement);\n   }\n\n   return gridContainer;\n}\n\nexport const updateCellContent = (row, col, playerName, isOccupied) => {\n   const cell = _getCellElement(row, col, playerName);\n   if (isOccupied) {\n      cell.textContent = \"H\";\n      cell.classList.remove(\"ship\");\n      cell.classList.add(\"hit\");\n   } else {\n      cell.textContent = \"X\";\n      cell.classList.add(\"miss\");\n   }\n};\n\nconst _getCellElement = (row, col, playerName) => {\n   const gameboard = document.getElementById(playerName);\n   return gameboard.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n};\n\nexport const updateGameOver = () => {\n   _displayGameOver();\n};\n\nconst _displayGameOver = () => {\n   const overlay = document.createElement(\"div\");\n   overlay.classList.add(\"overlay\");\n\n   const announcementCard = document.createElement(\"div\");\n   announcementCard.classList.add(\"announcement-card\");\n\n   const announcement = document.createElement(\"h2\");\n   announcement.textContent = \"Game Over\";\n\n   const closeButton = document.createElement(\"button\");\n   closeButton.textContent = \"Close\";\n   closeButton.addEventListener(\"click\", () => {\n      document.getElementById(\"root\").removeChild(overlay);\n   });\n\n   announcementCard.appendChild(announcement);\n   announcementCard.appendChild(closeButton);\n   overlay.appendChild(announcementCard);\n\n   document.getElementById(\"root\").appendChild(overlay);\n};\n","import { player1, player2, runGame } from \"./GameController\";\nimport { renderGameBoards, updateCellContent, updateGameOver } from \"./DomController\";\n\nexport const initApp = () => {\n   renderGameBoards(player1, player2);\n};\n\nexport const handleCellClick = (row, col, player) => {\n   row = Number(row);\n   col = Number(col);\n   const isOccupied = player.ownBoard.hasShip(row, col) ? true : false;\n   updateCellContent(row, col, player.name, isOccupied);\n   runGame(row, col, player);\n};\n\nexport const gameOver = () => {\n   updateGameOver();\n};\n"],"names":["Gameboard","size","board","Array","from","length","fill","ships","getCell","row","col","hasShip","getShip","index","Number","isInteger","undefined","placeShip","direction","i","_isValidPlacement","Error","ship","startRow","startCol","hits","getHits","hit","isSunk","Ship","shipIndex","push","newCol","getAllShips","receiveAttack","cell","isAllShipsSunken","every","getGrid","getShipPositions","map","getShipIndex","find","Player","name","ownBoard","player1","player2","_createGameBoardDOM","player","callback","playerName","gridContainer","document","createElement","classList","add","id","colElement","dataset","addEventListener","appendChild","handleCellClick","isOccupied","getElementById","querySelector","_getCellElement","textContent","remove","updateCellContent","gameOver","runGame","overlay","announcementCard","announcement","closeButton","removeChild","_displayGameOver","container","player1GameboardDOM","player2GameboardDOM","append","renderGameBoards"],"sourceRoot":""}