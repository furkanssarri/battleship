{"version":3,"file":"main.bundle.js","mappings":"mBAAO,MCEMA,EAAaC,IACvB,MAAMC,EAAQC,MAAMC,KAAK,CAAEC,OAAQJ,IAAQ,IAAME,MAAMF,GAAMK,KAAK,QAC5DC,EAAQ,GAERC,EAAU,CAACC,EAAKC,IAAQR,EAAMO,GAAKC,GACnCC,EAAU,CAACF,EAAKC,IAA8B,OAAtBF,EAAQC,EAAKC,GA0BrCE,EAAU,CAACH,EAAKC,KACnB,MAAMG,EAAQX,EAAMO,GAAKC,GACzB,OAAOI,OAAOC,UAAUF,GAASN,EAAMM,QAASG,CAAS,EAkD5D,MAAO,CACJC,UApCe,CAACR,EAAKC,EAAKL,EAAQa,KAClC,IAbuB,EAACT,EAAKC,EAAKL,EAAQa,KAC1C,GAAkB,eAAdA,GAA8BR,EAAML,EAASJ,EAAM,OAAO,EAC9D,GAAkB,aAAdiB,GAA4BT,EAAMJ,EAASJ,EAAM,OAAO,EAE5D,IAAK,IAAIkB,EAAI,EAAGA,EAAId,EAAQc,IAGzB,GAAIR,EAFyB,aAAdO,EAA2BT,EAAMU,EAAIV,EACvB,eAAdS,EAA6BR,EAAMS,EAAIT,GACzB,OAAO,EAEvC,OAAO,CAAI,EAINU,CAAkBX,EAAKC,EAAKL,EAAQa,GACtC,MAAM,IAAIG,MAAM,oDAGnB,MAAMC,EDvDQ,EAACjB,EAAQa,EAAWK,EAAUC,KAC/C,IAAIC,EAAO,EAOX,MAAO,CACJpB,SACAa,YACAK,WACAC,WACAE,QAVa,IAAMD,EAWnBE,IAVS,OACPF,CAAI,EAUNG,OARY,IAAMH,GAAQpB,EAS5B,ECuCewB,CAAKxB,EAAQa,EAAWT,EAAKC,GACpCoB,EAAYvB,EAAMF,OACxBE,EAAMwB,KAAKT,GAEX,IAAK,IAAIH,EAAI,EAAGA,EAAId,EAAQc,IAAK,CAC9B,MACMa,EAAuB,eAAdd,EAA6BR,EAAMS,EAAIT,EACtDR,EAF6B,aAAdgB,EAA2BT,EAAMU,EAAIV,GAEtCuB,GAAUF,CAC3B,GAwBAtB,UACAG,UACAC,UACAqB,YAlFiB,IAAM,IAAI1B,GAmF3B2B,cAzBmB,CAACzB,EAAKC,KACzB,MAAMyB,EAAO3B,EAAQC,EAAKC,GAC1B,GAAa,OAATyB,EAED,OADAjC,EAAMO,GAAKC,GAAO,IACX,IAEV,GAAII,OAAOC,UAAUoB,GAAO,CACzB,MAAMb,EAAOV,EAAQH,EAAKC,GAC1B,GAAIY,EAGD,OAFAA,EAAKK,MACLzB,EAAMO,GAAKC,GAAO,IACX,GAEb,CAGA,OADA0B,QAAQC,IAAI,wCACL,sCAAsC,EAU7CC,iBAnFsB,IAAM/B,EAAMgC,OAAOjB,GAASA,EAAKM,WAoFvDY,QAnFa,IAAMtC,EAoFnBuC,iBAlFsB,IACtBlC,EAAMmC,KAAI,EAAGnB,WAAUC,WAAUnB,SAAQa,gBAAgB,CACtDK,WACAC,WACAnB,SACAa,gBA8EHyB,aA3EkB,CAAClC,EAAKC,IAErBH,EAAMqC,MAAMtB,IACT,MAAM,SAAEC,EAAQ,SAAEC,EAAQ,OAAEnB,EAAM,UAAEa,GAAcI,EAClD,MAAkB,eAAdJ,EACMT,IAAQc,GAAYb,GAAOc,GAAYd,EAAMc,EAAWnB,EAExDK,IAAQc,GAAYf,GAAOc,GAAYd,EAAMc,EAAWlB,CAClE,UACGW,EAmEX,EC9FS6B,EAAUC,IAGb,CACJA,OACAC,SAJc/C,EAAU,MCCxBgD,ECJwB,MAC3B,IAAIC,EAAQ,OACRC,EAAU,KACVC,EAAmB,GAUvB,MAAO,CACJC,SATc,IAAMH,EAUpBI,SATeC,GAAcL,EAAQK,EAUrCC,WATiBC,GAAYN,EAAUM,EAUvCC,oBAT0BC,GAAYP,EAAiBpB,QAAQ2B,GAU/DC,cARmB,IAAMR,EAAiBS,QAS1CC,sBAV2B,IAAOV,EAAmB,GAWrDW,oBATyB,IAAM,IAAIX,GAUrC,EDjBcY,GACLC,EAAUnB,EAAO,YAC9BmB,EAAQjB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cACpC+C,EAAQjB,SAAS9B,UAAU,EAAG,EAAG,EAAG,YACpC+C,EAAQjB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cACpC+C,EAAQjB,SAAS9B,UAAU,EAAG,EAAG,EAAG,YACpC+C,EAAQjB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cACpC+C,EAAQjB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cAE7B,MAAMgD,EAAUpB,EAAO,YAC9BoB,EAAQlB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cACpCgD,EAAQlB,SAAS9B,UAAU,EAAG,EAAG,EAAG,YACpCgD,EAAQlB,SAAS9B,UAAU,EAAG,EAAG,EAAG,YACpCgD,EAAQlB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cACpCgD,EAAQlB,SAAS9B,UAAU,EAAG,EAAG,EAAG,cACpCgD,EAAQlB,SAAS9B,UAAU,EAAG,EAAG,EAAG,YAE7B,MAyEDiD,EAAoB,CAACzD,EAAKC,IACtB,CACJ,CAAED,IAAKA,EAAM,EAAGC,OAChB,CAAED,IAAKA,EAAM,EAAGC,OAChB,CAAED,MAAKC,IAAKA,EAAM,GAClB,CAAED,MAAKC,IAAKA,EAAM,IACnByD,QAAO,EAAG1D,MAAKC,SAAUD,GAAO,GAAKA,EAAM,IAAMC,GAAO,GAAKA,EAAM,KAQxE,SAAS0D,EAAwB3D,EAAKC,EAAK2D,GACxC,MAA0C,MAAtCA,EAAOtB,SAASvC,QAAQC,EAAKC,IAAsD,MAAtC2D,EAAOtB,SAASvC,QAAQC,EAAKC,EAIjF,CAEO,MAAM4D,EAAU,CAAC7D,EAAKC,KAC1B,MACM6D,EADgBC,EAAUC,qBACGT,EAAUC,EAAUD,EACjDU,EAASH,EAASxB,SAASb,cAAczB,EAAKC,GAEpDiE,EAAoBlE,EAAKC,EAAK6D,EAASzB,KAAM4B,GAEzCH,EAASxB,SAAST,oBAAoBsC,IAE1CJ,EAAUK,YACV,MAAMC,EAAWN,EAAUC,mBAQ3B,OAPAM,EAAaD,GAETA,IAAab,GACde,YAAW,KA5GY,CAAChC,IAC3B,MAAM,SACHI,EAAQ,SACRC,EAAQ,WACRE,EAAU,oBACVE,EAAmB,cACnBE,EAAa,oBACbG,EAAmB,sBACnBD,GACCb,EAEJ,IAAIiC,EAAWC,EAEf,GAAmB,SAAf9B,IAAuB,CACxB,KACM6B,YAAWC,aAsEb,CAAED,UAFSE,KAAKC,MAAsB,GAAhBD,KAAKE,UAEdH,UADFC,KAAKC,MAAsB,GAAhBD,KAAKE,kBApEtBjB,EAAwBa,EAAWC,EAAWlB,IACvD5B,QAAQC,IAAI,aAAa4C,MAAcC,UAAkB9B,iBAG1C,MAFAkB,EAAQW,EAAWC,KAG/B7B,EAAS,UACTjB,QAAQC,IAAI,6BAA6Be,QACzCG,EAAW0B,EAAWC,GACtB9C,QAAQC,IAAI,2CAA2C4C,MAAcC,QACrEzB,EAAoBS,EAAkBe,EAAWC,IACjD9C,QAAQC,IACL,wEAAwE4C,MAAcC,QAEzF9C,QAAQC,IAAI,8BAA+ByB,KAC3C1B,QAAQC,IAAI,sBAAsBe,OAExC,MAAO,GAAmB,WAAfA,IAAyB,CACjChB,QAAQC,IAAI,qCAAqCe,OACjDhB,QAAQC,IAAI,iDACZ,MAAMiD,EAAa3B,IACb4B,EAAUD,EAAW7E,IACrB+E,EAAUF,EAAW5E,IAI3B,GAHA0B,QAAQC,IAAI,4BAA6BiD,GACzClD,QAAQC,IAAI,gCAAgCkD,MAAYC,MAEpDD,GAAWC,EAAS,CACrBpD,QAAQC,IACL,4BAA4BkD,MAAYC,wBAA8BpC,UAEzE,MAAMsB,EAASJ,EAAQiB,EAASC,GAEjB,MAAXd,GACDtC,QAAQC,IACL,gCAAgCkD,MAAYC,8BAE/C/B,EAAoBS,EAAkBqB,EAASC,IAC/CpD,QAAQC,IACL,8CAA8CoB,EAAoBS,EAAkBqB,EAASC,SAE7E,MAAXd,GACRtC,QAAQC,IAAI,yDAIlB,MACGD,QAAQC,IAAI,4CAA4Ce,UACxDC,EAAS,QACTE,EAAW,MACXnB,QAAQC,IACL,6DAA6De,iDAEhES,IACAzB,QAAQC,IAAI,mCAAmCyB,OAErD,GAuCM2B,CAAczC,EAAU,GACxB,IAEC0B,CAAM,EAGVF,EAAY,MACf,IAAIkB,EAAgB1B,EAMpB,MAAO,CACJa,UALe,IAAOa,EAAgBA,IAAkB1B,EAAUC,EAAUD,EAM5ES,iBALsB,IAAMiB,EAM5BC,aALmBtB,GAAWA,IAAWqB,EAO9C,EAZiB,GEpEZE,EAAsB,CAACvB,EAAQwB,KAClC,MAAM5F,EAAOoE,EAAOtB,SAASP,UAAUnC,OACjCyF,EAAazB,EAAOvB,KACpBiD,EAAgBC,SAASC,cAAc,OAC7CF,EAAcG,UAAUC,IAAI,cAC5BJ,EAAcK,GAAKN,EAEnB,IAAK,IAAIpF,EAAM,EAAGA,EAAMT,EAAMS,IAAO,CAClC,MAAM2F,EAAaL,SAASC,cAAc,OAC1CI,EAAWH,UAAUC,IAAI,UAEzB,IAAK,IAAI1F,EAAM,EAAGA,EAAMR,EAAMQ,IAAO,CAClC,MAAM0B,EAAO6D,SAASC,cAAc,OACpC9D,EAAK+D,UAAUC,IAAI,QACnBhE,EAAKmE,QAAQ7F,IAAMA,EACnB0B,EAAKmE,QAAQ5F,IAAMA,EACnB,MAAM6F,EAAalC,EAAOtB,SAASpC,QAAQF,EAAKC,GAC5B,aAAhB2D,EAAOvB,MAAuByD,GAC/BpE,EAAK+D,UAAUC,IAAI,QAEtBhE,EAAKqE,iBAAiB,SAAS,IAAMX,EAASpF,EAAKC,EAAK2D,KACxDgC,EAAWI,YAAYtE,EAC1B,CACA4D,EAAcU,YAAYJ,EAC7B,CAEA,OAAON,CAAa,EClFVW,EAAkB,CAACjG,EAAKC,KAClCD,EAAMK,OAAOL,GACbC,EAAMI,OAAOJ,GACb4D,EAAQ7D,EAAKC,EAAI,EAGPiE,EAAsB,CAAClE,EAAKC,EAAK2D,EAAQkC,IDLrB,EAAC9F,EAAKC,EAAKoF,EAAYS,KACrD,MAAMpE,EA2Be,EAAC1B,EAAKC,EAAKoF,IACdE,SAASW,eAAeb,GACzBc,cAAc,cAAcnG,iBAAmBC,OA7BnDmG,CAAgBpG,EAAKC,EAAKoF,GACpB,MAAfS,GACDpE,EAAK+D,UAAUY,OAAO,QACtB3E,EAAK+D,UAAUC,IAAI,QACI,MAAfI,GACRpE,EAAK+D,UAAUC,IAAI,QAEtBhE,EAAK+D,UAAUC,IAAI,WAAW,ECF9BY,CAAkBtG,EAAKC,EAAK2D,EAAQkC,GAE1B3B,EAAW,KDyBC,MACtB,MAAMoC,EAAUhB,SAASC,cAAc,OACvCe,EAAQd,UAAUC,IAAI,WAEtB,MAAMc,EAAmBjB,SAASC,cAAc,OAChDgB,EAAiBf,UAAUC,IAAI,qBAE/B,MAAMe,EAAelB,SAASC,cAAc,MAC5CiB,EAAaC,YAAc,YAE3B,MAAMC,EAAcpB,SAASC,cAAc,UAC3CmB,EAAYD,YAAc,QAC1BC,EAAYZ,iBAAiB,SAAS,KACnCR,SAASW,eAAe,QAAQU,YAAYL,EAAQ,IAGvDC,EAAiBR,YAAYS,GAC7BD,EAAiBR,YAAYW,GAC7BJ,EAAQP,YAAYQ,GACpBjB,SAASW,eAAe,QAAQF,YAAYO,EAAQ,EA3BpDM,EChBgB,EAGNvC,EAAgBwC,GDDE,CAACA,IAC7B,MAAMC,EAAexB,SAASY,cAAc,aACtCa,EAAezB,SAASY,cAAc,aAEtB,aAAlBW,EAASzE,MACV0E,EAAatB,UAAUC,IAAI,YAC3BsB,EAAavB,UAAUY,OAAO,aACJ,aAAlBS,EAASzE,OACjB2E,EAAavB,UAAUC,IAAI,YAC3BqB,EAAatB,UAAUY,OAAO,YACjC,ECTuCY,CAAgBH,GDvB1B,EAACvD,EAASC,KACvC,MAAM0D,EAAY3B,SAASC,cAAc,OACzC0B,EAAUzB,UAAUC,IAAI,aAExB,MAAMyB,EAAsBhC,EAAoB5B,EAAS0C,GACnDmB,EAAsBjC,EAAoB3B,EAASyC,GACzDiB,EAAUG,OAAOF,EAAqBC,GAEtC7B,SAASW,eAAe,QAAQF,YAAYkB,EAAU,ECDtDI,CAAiB/D,EAASC,E","sources":["webpack://battleship/./src/components/Ship.js","webpack://battleship/./src/components/Gameboard.js","webpack://battleship/./src/components/Player.js","webpack://battleship/./src/GameController.js","webpack://battleship/./src/components/ComputerPlayer.js","webpack://battleship/./src/DomController.js","webpack://battleship/./src/AppController.js"],"sourcesContent":["export const Ship = (length, direction, startRow, startCol) => {\n   let hits = 0;\n\n   const getHits = () => hits;\n   const hit = () => {\n      ++hits;\n   };\n   const isSunk = () => hits >= length;\n   return {\n      length,\n      direction,\n      startRow,\n      startCol,\n      getHits,\n      hit,\n      isSunk,\n   };\n};\n","import { Ship } from \"./Ship\";\n\nexport const Gameboard = (size) => {\n   const board = Array.from({ length: size }, () => Array(size).fill(null));\n   const ships = [];\n\n   const getCell = (row, col) => board[row][col];\n   const hasShip = (row, col) => getCell(row, col) !== null;\n   const getAllShips = () => [...ships];\n   const isAllShipsSunken = () => ships.every((ship) => ship.isSunk());\n   const getGrid = () => board;\n\n   const getShipPositions = () =>\n      ships.map(({ startRow, startCol, length, direction }) => ({\n         startRow,\n         startCol,\n         length,\n         direction,\n      }));\n\n   const getShipIndex = (row, col) => {\n      return (\n         ships.find((ship) => {\n            const { startRow, startCol, length, direction } = ship;\n            if (direction === \"horizontal\") {\n               return row === startRow && col >= startCol && col < startCol + length;\n            } else {\n               return col === startCol && row >= startRow && row < startRow + length;\n            }\n         }) || undefined\n      );\n   };\n\n   const getShip = (row, col) => {\n      const index = board[row][col];\n      return Number.isInteger(index) ? ships[index] : undefined;\n   };\n\n   const _isValidPlacement = (row, col, length, direction) => {\n      if (direction === \"horizontal\" && col + length > size) return false;\n      if (direction === \"vertical\" && row + length > size) return false;\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         if (hasShip(newRow, newCol)) return false;\n      }\n      return true;\n   };\n\n   const placeShip = (row, col, length, direction) => {\n      if (!_isValidPlacement(row, col, length, direction)) {\n         throw new Error(\"Invalid placement: Out of bounds or overlapping.\");\n      }\n\n      const ship = Ship(length, direction, row, col);\n      const shipIndex = ships.length;\n      ships.push(ship);\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         board[newRow][newCol] = shipIndex;\n      }\n   };\n\n   const receiveAttack = (row, col) => {\n      const cell = getCell(row, col);\n      if (cell === null) {\n         board[row][col] = \"X\"; // Missed shot\n         return \"X\";\n      }\n      if (Number.isInteger(cell)) {\n         const ship = getShip(row, col);\n         if (ship) {\n            ship.hit();\n            board[row][col] = \"H\";\n            return \"H\";\n         }\n      }\n      // throw new Error(\"This cell was already attacked.\");\n      console.log(\"Cell already attacked... Skipping...\");\n      return \"Cell already attacked... Skipping...\";\n   };\n\n   return {\n      placeShip,\n      getCell,\n      hasShip,\n      getShip,\n      getAllShips,\n      receiveAttack,\n      isAllShipsSunken,\n      getGrid,\n      getShipPositions,\n      getShipIndex,\n   };\n};\n","import { Gameboard } from \"./Gameboard\";\n\nexport const Player = (name) => {\n   const ownBoard = Gameboard(10);\n\n   return {\n      name,\n      ownBoard,\n   };\n};\n","import { Player } from \"./components/Player\";\nimport { ComputerPlayer } from \"./components/ComputerPlayer\";\nimport { gameOver, passCellDisplayInfo, passTurnInfo } from \"./AppController\";\n\nconst cpuPlayer = ComputerPlayer();\nexport const player1 = Player(\"player-1\");\nplayer1.ownBoard.placeShip(4, 3, 5, \"horizontal\");\nplayer1.ownBoard.placeShip(6, 4, 4, \"vertical\");\nplayer1.ownBoard.placeShip(2, 1, 3, \"horizontal\");\nplayer1.ownBoard.placeShip(1, 8, 2, \"vertical\");\nplayer1.ownBoard.placeShip(0, 4, 3, \"horizontal\");\nplayer1.ownBoard.placeShip(8, 6, 3, \"horizontal\");\n\nexport const player2 = Player(\"player-2\");\nplayer2.ownBoard.placeShip(0, 1, 5, \"horizontal\");\nplayer2.ownBoard.placeShip(3, 2, 4, \"vertical\");\nplayer2.ownBoard.placeShip(7, 5, 3, \"vertical\");\nplayer2.ownBoard.placeShip(5, 5, 3, \"horizontal\");\nplayer2.ownBoard.placeShip(2, 6, 2, \"horizontal\");\nplayer2.ownBoard.placeShip(2, 4, 2, \"vertical\");\n\nexport const handleCpuTurn = (cpuPlayer) => {\n   const {\n      getState,\n      setState,\n      setLastHit,\n      addPotentialTargets,\n      getNextTarget,\n      getPotentialTargets,\n      clearPotentialTargets,\n   } = cpuPlayer;\n\n   let randomRow, randomCol;\n\n   if (getState() === \"hunt\") {\n      do {\n         ({ randomRow, randomCol } = _randomizeCoords());\n      } while (_checkIfCellWasAttacked(randomRow, randomCol, player1));\n      console.log(`attacking ${randomRow}, ${randomCol} with ${getState()} status...`);\n      const result = runGame(randomRow, randomCol);\n\n      if (result === \"H\") {\n         setState(\"target\");\n         console.log(`the status has changed to ${getState()}.`);\n         setLastHit(randomRow, randomCol);\n         console.log(`saving the last successful hit's coords ${randomRow}, ${randomCol}...`);\n         addPotentialTargets(_getAdjacentCells(randomRow, randomCol));\n         console.log(\n            `calculating the adjacent cells to the last hit, which was at coords: ${randomRow}, ${randomCol}...`,\n         );\n         console.log(`the potential targets are: `, getPotentialTargets());\n         console.log(`and the status is: ${getState()}`);\n      }\n   } else if (getState() === \"target\") {\n      console.log(`attacking with updated status of: ${getState()}`);\n      console.log(`getting the new coords for the next attack...`);\n      const nextTarget = getNextTarget();\n      const nextRow = nextTarget.row;\n      const nextCol = nextTarget.col;\n      console.log(\"undestructed new coords: \", nextTarget);\n      console.log(`the new coords to attack is: ${nextRow}, ${nextCol}.`);\n\n      if (nextRow && nextCol) {\n         console.log(\n            `attacking the new coords ${nextRow}, ${nextCol} with the status of ${getState()}...`,\n         );\n         const result = runGame(nextRow, nextCol);\n\n         if (result === \"H\") {\n            console.log(\n               `HIT AGAIN! adding the coords ${nextRow}, ${nextCol} to the adjacent cells...`,\n            );\n            addPotentialTargets(_getAdjacentCells(nextRow, nextCol));\n            console.log(\n               `the updated version of adjacent cells are: ${addPotentialTargets(_getAdjacentCells(nextRow, nextCol))}.`,\n            );\n         } else if (result === \"X\") {\n            console.log(`thats a miss! waiting for next Computer player turn...`);\n            // Continue targeting by moving to the next potential target\n            // No action needed here; the loop will handle the next target\n         }\n      } else {\n         console.log(`The ship's sunk! resetting the status of ${getState()}...`);\n         setState(\"hunt\");\n         setLastHit(null);\n         console.log(\n            `resetting has been done. now we are back to the status of ${getState()}, and the last hit was reset bacj to null.`,\n         );\n         clearPotentialTargets();\n         console.log(`cleared potential targets list: ${getPotentialTargets()}.`);\n      }\n   }\n};\n\nconst _getAdjacentCells = (row, col) => {\n   return [\n      { row: row - 1, col },\n      { row: row + 1, col },\n      { row, col: col - 1 },\n      { row, col: col + 1 },\n   ].filter(({ row, col }) => row >= 0 && row < 10 && col >= 0 && col < 10);\n};\n\nfunction _randomizeCoords() {\n   const randomRow = Math.floor(Math.random() * 10);\n   const randomCol = Math.floor(Math.random() * 10);\n   return { randomRow, randomCol };\n}\nfunction _checkIfCellWasAttacked(row, col, player) {\n   if (player.ownBoard.getCell(row, col) === \"X\" || player.ownBoard.getCell(row, col) === \"H\") {\n      return true;\n   }\n   return false;\n}\n\nexport const runGame = (row, col) => {\n   const currentPlayer = takeTurns.getCurrentPlayer();\n   const opponent = currentPlayer === player1 ? player2 : player1;\n   const result = opponent.ownBoard.receiveAttack(row, col);\n\n   passCellDisplayInfo(row, col, opponent.name, result);\n\n   if (opponent.ownBoard.isAllShipsSunken()) gameOver();\n\n   takeTurns.swapTurns();\n   const nextTurn = takeTurns.getCurrentPlayer();\n   passTurnInfo(nextTurn);\n\n   if (nextTurn === player2) {\n      setTimeout(() => {\n         handleCpuTurn(cpuPlayer);\n      }, 50);\n   }\n   return result;\n};\n\nconst takeTurns = (() => {\n   let currentPlayer = player1;\n\n   const swapTurns = () => (currentPlayer = currentPlayer === player1 ? player2 : player1);\n   const getCurrentPlayer = () => currentPlayer;\n   const isPlayerTurn = (player) => player === currentPlayer;\n\n   return {\n      swapTurns,\n      getCurrentPlayer,\n      isPlayerTurn,\n   };\n})();\n","export const ComputerPlayer = () => {\n   let state = \"hunt\";\n   let lastHit = null;\n   let potentialTargets = [];\n\n   const getState = () => state;\n   const setState = (newState) => (state = newState);\n   const setLastHit = (coords) => (lastHit = coords);\n   const addPotentialTargets = (targets) => potentialTargets.push(...targets);\n   const clearPotentialTargets = () => (potentialTargets = []);\n   const getNextTarget = () => potentialTargets.shift();\n   const getPotentialTargets = () => [...potentialTargets];\n\n   return {\n      getState,\n      setState,\n      setLastHit,\n      addPotentialTargets,\n      getNextTarget,\n      clearPotentialTargets,\n      getPotentialTargets,\n   };\n};\n","import { handleCellClick } from \"./AppController\";\n\nexport const renderGameBoards = (player1, player2) => {\n   const container = document.createElement(\"div\");\n   container.classList.add(\"container\");\n\n   const player1GameboardDOM = _createGameBoardDOM(player1, handleCellClick);\n   const player2GameboardDOM = _createGameBoardDOM(player2, handleCellClick);\n   container.append(player1GameboardDOM, player2GameboardDOM);\n\n   document.getElementById(\"root\").appendChild(container);\n};\n\nexport const updateCellContent = (row, col, playerName, isOccupied) => {\n   const cell = _getCellElement(row, col, playerName);\n   if (isOccupied === \"H\") {\n      cell.classList.remove(\"ship\");\n      cell.classList.add(\"hit\");\n   } else if (isOccupied === \"X\") {\n      cell.classList.add(\"miss\");\n   }\n   cell.classList.add(\"disabled\");\n};\n\nexport const updateDomOnTurn = (turnInfo) => {\n   const player1Board = document.querySelector(\"#player-1\");\n   const player2Board = document.querySelector(\"#player-2\");\n\n   if (turnInfo.name === \"player-1\") {\n      player1Board.classList.add(\"disabled\");\n      player2Board.classList.remove(\"disabled\");\n   } else if (turnInfo.name === \"player-2\") {\n      player2Board.classList.add(\"disabled\");\n      player1Board.classList.remove(\"disabled\");\n   }\n};\n\nexport const updateGameOver = () => {\n   _displayGameOver();\n};\n\nconst _getCellElement = (row, col, playerName) => {\n   const gameboard = document.getElementById(playerName);\n   return gameboard.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n};\n\nconst _displayGameOver = () => {\n   const overlay = document.createElement(\"div\");\n   overlay.classList.add(\"overlay\");\n\n   const announcementCard = document.createElement(\"div\");\n   announcementCard.classList.add(\"announcement-card\");\n\n   const announcement = document.createElement(\"h2\");\n   announcement.textContent = \"Game Over\";\n\n   const closeButton = document.createElement(\"button\");\n   closeButton.textContent = \"Close\";\n   closeButton.addEventListener(\"click\", () => {\n      document.getElementById(\"root\").removeChild(overlay);\n   });\n\n   announcementCard.appendChild(announcement);\n   announcementCard.appendChild(closeButton);\n   overlay.appendChild(announcementCard);\n   document.getElementById(\"root\").appendChild(overlay);\n};\n\nconst _createGameBoardDOM = (player, callback) => {\n   const size = player.ownBoard.getGrid().length;\n   const playerName = player.name;\n   const gridContainer = document.createElement(\"div\");\n   gridContainer.classList.add(\"game-board\");\n   gridContainer.id = playerName;\n\n   for (let col = 0; col < size; col++) {\n      const colElement = document.createElement(\"div\");\n      colElement.classList.add(\"column\");\n\n      for (let row = 0; row < size; row++) {\n         const cell = document.createElement(\"div\");\n         cell.classList.add(\"cell\");\n         cell.dataset.row = row;\n         cell.dataset.col = col;\n         const isOccupied = player.ownBoard.hasShip(row, col);\n         if (player.name !== \"player-2\" && isOccupied) {\n            cell.classList.add(\"ship\");\n         }\n         cell.addEventListener(\"click\", () => callback(row, col, player));\n         colElement.appendChild(cell);\n      }\n      gridContainer.appendChild(colElement);\n   }\n\n   return gridContainer;\n};\n","import { player1, player2, runGame } from \"./GameController\";\nimport {\n   renderGameBoards,\n   updateCellContent,\n   updateGameOver,\n   updateDomOnTurn,\n} from \"./DomController\";\n\nexport const initApp = () => {\n   renderGameBoards(player1, player2);\n};\n\nexport const handleCellClick = (row, col) => {\n   row = Number(row);\n   col = Number(col);\n   runGame(row, col);\n};\n\nexport const passCellDisplayInfo = (row, col, player, isOccupied) =>\n   updateCellContent(row, col, player, isOccupied);\n\nexport const gameOver = () => {\n   updateGameOver();\n};\n\nexport const passTurnInfo = (turnInfo) => updateDomOnTurn(turnInfo);\n"],"names":["Gameboard","size","board","Array","from","length","fill","ships","getCell","row","col","hasShip","getShip","index","Number","isInteger","undefined","placeShip","direction","i","_isValidPlacement","Error","ship","startRow","startCol","hits","getHits","hit","isSunk","Ship","shipIndex","push","newCol","getAllShips","receiveAttack","cell","console","log","isAllShipsSunken","every","getGrid","getShipPositions","map","getShipIndex","find","Player","name","ownBoard","cpuPlayer","state","lastHit","potentialTargets","getState","setState","newState","setLastHit","coords","addPotentialTargets","targets","getNextTarget","shift","clearPotentialTargets","getPotentialTargets","ComputerPlayer","player1","player2","_getAdjacentCells","filter","_checkIfCellWasAttacked","player","runGame","opponent","takeTurns","getCurrentPlayer","result","passCellDisplayInfo","gameOver","swapTurns","nextTurn","passTurnInfo","setTimeout","randomRow","randomCol","Math","floor","random","nextTarget","nextRow","nextCol","handleCpuTurn","currentPlayer","isPlayerTurn","_createGameBoardDOM","callback","playerName","gridContainer","document","createElement","classList","add","id","colElement","dataset","isOccupied","addEventListener","appendChild","handleCellClick","getElementById","querySelector","_getCellElement","remove","updateCellContent","overlay","announcementCard","announcement","textContent","closeButton","removeChild","_displayGameOver","turnInfo","player1Board","player2Board","updateDomOnTurn","container","player1GameboardDOM","player2GameboardDOM","append","renderGameBoards"],"sourceRoot":""}