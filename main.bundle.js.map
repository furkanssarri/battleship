{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://battleship/./src/components/Ship.js","webpack://battleship/./src/components/Gameboard.js","webpack://battleship/./src/components/Player.js","webpack://battleship/./src/GameController.js","webpack://battleship/./src/components/ComputerPlayer.js","webpack://battleship/./src/DomController.js","webpack://battleship/./src/AppController.js","webpack://battleship/./src/ShipPlacer.js"],"sourcesContent":["export const Ship = (length, direction, startRow, startCol) => {\n   let hits = 0;\n\n   const getHits = () => hits;\n   const hit = () => {\n      ++hits;\n   };\n   const isSunk = () => hits >= length;\n   return {\n      length,\n      direction,\n      startRow,\n      startCol,\n      getHits,\n      hit,\n      isSunk,\n   };\n};\n","import { Ship } from \"./Ship\";\n\nexport const Gameboard = (size) => {\n   const board = Array.from({ length: size }, () => Array(size).fill(null));\n   const ships = [];\n\n   const getCell = (row, col) => board[row][col];\n   const hasShip = (row, col) => getCell(row, col) !== null;\n   const getAllShips = () => [...ships];\n   const isAllShipsSunken = () => ships.every((ship) => ship.isSunk());\n   const getGrid = () => board;\n\n   const getShipPositions = () =>\n      ships.map(({ startRow, startCol, length, direction }) => ({\n         startRow,\n         startCol,\n         length,\n         direction,\n      }));\n\n   const getShipIndex = (row, col) => {\n      return (\n         ships.find((ship) => {\n            const { startRow, startCol, length, direction } = ship;\n            if (direction === \"horizontal\") {\n               return row === startRow && col >= startCol && col < startCol + length;\n            } else {\n               return col === startCol && row >= startRow && row < startRow + length;\n            }\n         }) || undefined\n      );\n   };\n\n   const getShip = (row, col) => {\n      const index = board[row][col];\n      return Number.isInteger(index) ? ships[index] : undefined;\n   };\n\n   const _isValidPlacement = (row, col, length, direction) => {\n      if (direction === \"horizontal\" && col + length > size) return false;\n      if (direction === \"vertical\" && row + length > size) return false;\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         if (hasShip(newRow, newCol)) return false;\n      }\n      return true;\n   };\n\n   const placeShip = (row, col, length, direction) => {\n      if (!_isValidPlacement(row, col, length, direction)) {\n         throw new Error(\"Invalid placement: Out of bounds or overlapping.\");\n      }\n\n      const ship = Ship(length, direction, row, col);\n      const shipIndex = ships.length;\n      ships.push(ship);\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         board[newRow][newCol] = shipIndex;\n      }\n   };\n\n   const receiveAttack = (row, col) => {\n      let cell = getCell(row, col);\n      if (cell === null) {\n         board[row][col] = \"X\"; // Missed shot\n         return \"X\";\n      }\n      if (Number.isInteger(cell)) {\n         const ship = getShip(row, col);\n         if (ship) {\n            ship.hit();\n            board[row][col] = \"H\";\n            return \"H\";\n         }\n      }\n      // throw new Error(\"This cell was already attacked.\");\n      console.log(\"Cell already attacked... Skipping...\");\n      return \"Cell already attacked... Skipping...\";\n   };\n\n   return {\n      placeShip,\n      getCell,\n      hasShip,\n      getShip,\n      getAllShips,\n      receiveAttack,\n      isAllShipsSunken,\n      getGrid,\n      getShipPositions,\n      getShipIndex,\n   };\n};\n","import { Gameboard } from \"./Gameboard\";\n\nexport const Player = (name) => {\n   const ownBoard = Gameboard(10);\n\n   return {\n      name,\n      ownBoard,\n   };\n};\n","import { Player } from \"./components/Player\";\nimport { ComputerPlayer } from \"./components/ComputerPlayer\";\nimport {\n   gameOver,\n   passCellDisplayInfo,\n   passTurnInfo,\n   callUpdateGameboardDOM,\n} from \"./AppController\";\nimport { ShipPlacer } from \"./ShipPlacer\";\nimport { Ship } from \"./components/Ship\";\n\nconst cpuPlayer = ComputerPlayer();\nexport const player1 = Player(\"player-1\");\n// player1.ownBoard.placeShip(4, 3, 5, \"horizontal\");\n// player1.ownBoard.placeShip(6, 4, 4, \"vertical\");\n// player1.ownBoard.placeShip(2, 1, 3, \"horizontal\");\n// player1.ownBoard.placeShip(1, 8, 2, \"vertical\");\n// player1.ownBoard.placeShip(0, 4, 3, \"horizontal\");\n// player1.ownBoard.placeShip(8, 6, 3, \"horizontal\");\n\nexport const player2 = Player(\"player-2\");\nplayer2.ownBoard.placeShip(0, 1, 5, \"horizontal\");\nplayer2.ownBoard.placeShip(3, 2, 4, \"vertical\");\nplayer2.ownBoard.placeShip(7, 5, 3, \"vertical\");\nplayer2.ownBoard.placeShip(5, 5, 3, \"horizontal\");\nplayer2.ownBoard.placeShip(2, 6, 2, \"horizontal\");\nplayer2.ownBoard.placeShip(2, 4, 2, \"vertical\");\n\nlet currentShipIndex = 0;\nconst armada = [\n   { type: \"Battleship\", ship: Ship(5) },\n   { type: \"Destroyer\", ship: Ship(4) },\n   { type: \"Submarine\", ship: Ship(4) },\n   { type: \"Carrier\", ship: Ship(3) },\n   { type: \"Boat\", ship: Ship(2) },\n];\n\nexport const placeShips = (row, col) => {\n   const shipPlacer = ShipPlacer(player1);\n\n   if (currentShipIndex < armada.length) {\n      const vessel = armada[currentShipIndex];\n      const placementSuccessful = shipPlacer.placeShipManually(\n         row,\n         col,\n         vessel.ship.length,\n         \"horizontal\",\n      );\n\n      if (placementSuccessful) {\n         console.log(`${vessel.type} placed successfully.`);\n         callUpdateGameboardDOM(player1);\n         currentShipIndex++;\n      } else {\n         console.log(\"Invalid Placement. Try again.\");\n      }\n   }\n\n   if (currentShipIndex === armada.length) {\n      console.log(\"All ships placed.\");\n   }\n};\n\nexport const resetComputerPlayer = (cpuPlayer) => {\n   const { setState, setLastHit, setShipOrientation, clearPotentialTargets } = cpuPlayer;\n   setState(\"hunt\");\n   setLastHit(null);\n   setShipOrientation(null);\n   clearPotentialTargets();\n   // console.log(\"Computer player reset to hunt mode.\");\n};\n\nexport const addTargetsAlongOrientation = (cpuPlayer, row, col) => {\n   const { addPotentialTargets, getShipOrientation, hasCellBeenAttacked } = cpuPlayer;\n\n   if (getShipOrientation() === \"horizontal\") {\n      // Add all valid cells to the left, skipping already-attacked cells\n      let leftCol = col - 1;\n      while (leftCol >= 0 && !hasCellBeenAttacked(row, leftCol)) {\n         addPotentialTargets([{ row, col: leftCol }]);\n         leftCol--;\n      }\n\n      // Add all valid cells to the right, skipping already-attacked cells\n      let rightCol = col + 1;\n      while (rightCol < 10 && !hasCellBeenAttacked(row, rightCol)) {\n         addPotentialTargets([{ row, col: rightCol }]);\n         rightCol++;\n      }\n   } else if (getShipOrientation() === \"vertical\") {\n      // Add all valid cells above, skipping already-attacked cells\n      let upRow = row - 1;\n      while (upRow >= 0 && !hasCellBeenAttacked(upRow, col)) {\n         addPotentialTargets([{ row: upRow, col }]);\n         upRow--;\n      }\n\n      // Add all valid cells below, skipping already-attacked cells\n      let downRow = row + 1;\n      while (downRow < 10 && !hasCellBeenAttacked(downRow, col)) {\n         addPotentialTargets([{ row: downRow, col }]);\n         downRow++;\n      }\n   }\n};\n\nexport const handleHuntMode = (cpuPlayer, opponent) => {\n   const {\n      setState,\n      setLastHit,\n      getLastHit,\n      addPotentialTargets,\n      hasCellBeenAttacked,\n      markCellAsAttacked,\n   } = cpuPlayer;\n\n   let randomRow, randomCol;\n   do {\n      ({ randomRow, randomCol } = _randomizeCoords());\n   } while (hasCellBeenAttacked(randomRow, randomCol));\n\n   const result = runGame(randomRow, randomCol);\n   markCellAsAttacked(randomRow, randomCol);\n\n   if (result === \"H\") {\n      const shipToCheck = opponent.ownBoard.getShipIndex(randomRow, randomCol);\n      if (shipToCheck && shipToCheck.isSunk()) {\n         console.log(`Ship at (${randomRow}, ${randomCol}) is sunk! Resetting to hunt mode...`);\n         resetComputerPlayer(cpuPlayer);\n      } else {\n         setState(\"target\");\n         setLastHit({ row: randomRow, col: randomCol });\n         console.log(`Last hit: `, getLastHit());\n         addPotentialTargets(_getAdjacentCells(randomRow, randomCol));\n      }\n   }\n};\n\nexport const handleTargetMode = (cpuPlayer, opponent) => {\n   const {\n      getNextTarget,\n      getLastHit,\n      setShipOrientation,\n      getShipOrientation,\n      hasCellBeenAttacked,\n      markCellAsAttacked,\n      getAttackDirection,\n      setAttackDirection,\n      getCurrentShipLength,\n      setCurrentShipLength,\n      resetCurrentShipLength,\n   } = cpuPlayer;\n\n   let nextTarget;\n   do {\n      nextTarget = getNextTarget();\n   } while (nextTarget !== null && hasCellBeenAttacked(nextTarget.row, nextTarget.col));\n\n   if (nextTarget !== null) {\n      const { row: nextRow, col: nextCol } = nextTarget;\n      const result = runGame(nextRow, nextCol);\n      markCellAsAttacked(nextRow, nextCol);\n\n      if (result === \"H\") {\n         const shipToCheck = opponent.ownBoard.getShipIndex(nextRow, nextCol);\n         if (shipToCheck && shipToCheck.isSunk()) {\n            console.log(`Ship at (${nextRow}, ${nextCol}) is sunk! Resetting to hunt mode...`);\n            resetComputerPlayer(cpuPlayer);\n            resetCurrentShipLength();\n         } else {\n            if (getShipOrientation() === null) {\n               const { row: lastRow, col: lastCol } = getLastHit();\n               console.log(\n                  `Last hit: (${lastRow}, ${lastCol}), Current hit: (${nextRow}, ${nextCol})`,\n               );\n\n               if (nextRow === lastRow) {\n                  setShipOrientation(\"horizontal\");\n                  console.log(\"Detected ship orientation: horizontal\");\n               } else if (nextCol === lastCol) {\n                  setShipOrientation(\"vertical\");\n                  console.log(\"Detected ship orientation: vertical\");\n               }\n            }\n\n            // Increment the current ship length\n            setCurrentShipLength(getCurrentShipLength() + 1);\n\n            // Add all valid targets along the ship's orientation\n            addTargetsAlongOrientation(cpuPlayer, nextRow, nextCol);\n         }\n      } else if (result === \"X\") {\n         const currentDirection = getAttackDirection();\n         const newDirection =\n            currentDirection === \"right\"\n               ? \"left\"\n               : currentDirection === \"left\"\n                 ? \"right\"\n                 : currentDirection === \"up\"\n                   ? \"down\"\n                   : \"up\";\n         setAttackDirection(newDirection);\n         addTargetsAlongOrientation(cpuPlayer, nextRow, nextCol);\n      }\n   } else {\n      resetComputerPlayer(cpuPlayer);\n      resetCurrentShipLength();\n   }\n};\n\nexport const handleCpuTurn = (cpuPlayer) => {\n   const currentPlayer = takeTurns.getCurrentPlayer();\n   const opponent = currentPlayer === player1 ? player2 : player1;\n   const { getState } = cpuPlayer;\n\n   if (getState() === \"hunt\") {\n      handleHuntMode(cpuPlayer, opponent);\n   } else if (getState() === \"target\") {\n      handleTargetMode(cpuPlayer, opponent);\n   }\n};\n\nconst _getAdjacentCells = (row, col) => {\n   return [\n      { row: row - 1, col }, // Up\n      { row: row + 1, col }, // Down\n      { row, col: col - 1 }, // Left\n      { row, col: col + 1 }, // Right\n   ].filter(({ row, col }) => row >= 0 && row < 10 && col >= 0 && col < 10); // Filter out-of-bounds cells\n};\n\nconst _randomizeCoords = () => {\n   const randomRow = Math.floor(Math.random() * 10);\n   const randomCol = Math.floor(Math.random() * 10);\n   return { randomRow, randomCol };\n};\nconst _checkIfCellWasAttacked = (row, col, player) => {\n   if (player.ownBoard.getCell(row, col) === \"X\" || player.ownBoard.getCell(row, col) === \"H\") {\n      return true;\n   }\n   return false;\n};\n\nexport const runGame = (row, col) => {\n   const currentPlayer = takeTurns.getCurrentPlayer();\n   const opponent = currentPlayer === player1 ? player2 : player1;\n   const result = opponent.ownBoard.receiveAttack(row, col);\n\n   passCellDisplayInfo(row, col, opponent.name, result);\n\n   if (opponent.ownBoard.isAllShipsSunken()) gameOver();\n\n   takeTurns.swapTurns();\n   const nextTurn = takeTurns.getCurrentPlayer();\n   passTurnInfo(nextTurn);\n\n   if (nextTurn === player2) {\n      setTimeout(() => {\n         handleCpuTurn(cpuPlayer);\n      }, 50);\n   }\n   return result;\n};\n\nconst takeTurns = (() => {\n   let currentPlayer = player1;\n\n   const swapTurns = () => (currentPlayer = currentPlayer === player1 ? player2 : player1);\n   const getCurrentPlayer = () => currentPlayer;\n   const isPlayerTurn = (player) => player === currentPlayer;\n\n   return {\n      swapTurns,\n      getCurrentPlayer,\n      isPlayerTurn,\n   };\n})();\n","export const ComputerPlayer = () => {\n   let state = \"hunt\";\n   let lastHit = null; // Stores the last hit coordinates as { row, col }\n   let potentialTargets = [];\n   const attackedCells = new Set();\n   let shipOrientation = null;\n   let attackDirection = null; // \"left\", \"right\", \"up\", or \"down\"\n   let currentShipLength = 0; // Track the length of the current ship\n\n   const getState = () => state;\n   const setState = (newState) => (state = newState);\n   const getLastHit = () => lastHit;\n   const setLastHit = (coords) => (lastHit = coords);\n   const addPotentialTargets = (targets) => potentialTargets.push(...targets);\n   const clearPotentialTargets = () => (potentialTargets = []);\n   const getNextTarget = () => (potentialTargets.length > 0 ? potentialTargets.shift() : null);\n   const getPotentialTargets = () => [...potentialTargets];\n   const markCellAsAttacked = (row, col) => attackedCells.add(`${row}, ${col}`);\n   const hasCellBeenAttacked = (row, col) => attackedCells.has(`${row}, ${col}`);\n   const getShipOrientation = () => shipOrientation;\n   const setShipOrientation = (orientation) => (shipOrientation = orientation);\n   const getAttackDirection = () => attackDirection;\n   const setAttackDirection = (direction) => (attackDirection = direction);\n   const getCurrentShipLength = () => currentShipLength;\n   const setCurrentShipLength = (length) => (currentShipLength = length);\n   const resetCurrentShipLength = () => (currentShipLength = 0);\n\n   return {\n      getState,\n      setState,\n      getLastHit,\n      setLastHit,\n      addPotentialTargets,\n      getNextTarget,\n      clearPotentialTargets,\n      getPotentialTargets,\n      markCellAsAttacked,\n      hasCellBeenAttacked,\n      getShipOrientation,\n      setShipOrientation,\n      getAttackDirection,\n      setAttackDirection,\n      getCurrentShipLength,\n      setCurrentShipLength,\n      resetCurrentShipLength,\n   };\n};\n","import { handleCellClick, handleShipClick } from \"./AppController\";\nimport { ShipPlacer } from \"./ShipPlacer\";\n\nexport const renderGameBoards = (player1, player2) => {\n   const container = document.createElement(\"div\");\n   container.classList.add(\"container\");\n\n   const player1GameboardDOM = _createGameBoardDOM(player1, handleCellClick);\n   const player2GameboardDOM = _createGameBoardDOM(player2, handleCellClick);\n\n   container.append(player1GameboardDOM, player2GameboardDOM);\n   document.getElementById(\"root\").appendChild(container);\n};\n\nexport const renderShipPlacementBoard = (player) => {\n   const overlay = document.createElement(\"div\");\n   overlay.classList.add(\"overlay\");\n\n   const popup = document.createElement(\"div\");\n   popup.classList.add(\"place-ships\");\n\n   const message = document.createElement(\"p\");\n   message.textContent = \"Place your ships\";\n   popup.appendChild(message);\n\n   const gameBoardDOM = _createGameBoardDOM(\n      player,\n      (row, col) => handleShipClick(row, col, player),\n      `${player.name}-popup`,\n   );\n   popup.appendChild(gameBoardDOM);\n\n   const closeBtn = document.createElement(\"button\");\n   closeBtn.textContent = \"Close\";\n   closeBtn.addEventListener(\"click\", () => {\n      document.getElementById(\"root\").removeChild(overlay);\n   });\n   popup.appendChild(closeBtn);\n\n   overlay.appendChild(popup);\n   document.getElementById(\"root\").appendChild(overlay);\n};\n\nexport const UpdateGameboardDOM = (player) => {\n   const originalGameboardElement = document.getElementById(player.name);\n   const popupGameboardElement = document.getElementById(`${player.name}-popup`);\n   const size = player.ownBoard.getGrid().length;\n\n   const updateGameboardElement = (gameboardElement) => {\n      if (!gameboardElement) return;\n      for (let row = 0; row < size; row++) {\n         for (let col = 0; col < size; col++) {\n            const cell = gameboardElement.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n            const isOccupied = player.ownBoard.hasShip(row, col);\n\n            if (player.name != \"player-2\" && isOccupied) {\n               cell.classList.add(\"ship\");\n            }\n         }\n      }\n   };\n\n   updateGameboardElement(originalGameboardElement);\n   updateGameboardElement(popupGameboardElement);\n};\n\nexport const updateCellContent = (row, col, playerName, isOccupied) => {\n   const cell = _getCellElement(row, col, playerName);\n   if (isOccupied === \"H\") {\n      cell.classList.remove(\"ship\");\n      cell.classList.add(\"hit\");\n   } else if (isOccupied === \"X\") {\n      cell.classList.add(\"miss\");\n   }\n   cell.classList.add(\"disabled\");\n};\n\nexport const updateDomOnTurn = (turnInfo) => {\n   const player1Board = document.querySelector(\"#player-1\");\n   const player2Board = document.querySelector(\"#player-2\");\n\n   if (turnInfo.name === \"player-1\") {\n      player1Board.classList.add(\"disabled\");\n      player2Board.classList.remove(\"disabled\");\n   } else if (turnInfo.name === \"player-2\") {\n      player2Board.classList.add(\"disabled\");\n      player1Board.classList.remove(\"disabled\");\n   }\n};\n\nexport const updateGameOver = () => {\n   _displayGameOver();\n};\n\nconst _getCellElement = (row, col, playerName) => {\n   const gameboard = document.getElementById(playerName);\n   return gameboard.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n};\n\nconst _displayGameOver = () => {\n   const overlay = document.createElement(\"div\");\n   overlay.classList.add(\"overlay\");\n\n   const announcementCard = document.createElement(\"div\");\n   announcementCard.classList.add(\"announcement-card\");\n\n   const announcement = document.createElement(\"h2\");\n   announcement.textContent = \"Game Over\";\n\n   const closeButton = document.createElement(\"button\");\n   closeButton.textContent = \"Close\";\n   closeButton.addEventListener(\"click\", () => {\n      document.getElementById(\"root\").removeChild(overlay);\n   });\n\n   announcementCard.appendChild(announcement);\n   announcementCard.appendChild(closeButton);\n   overlay.appendChild(announcementCard);\n   document.getElementById(\"root\").appendChild(overlay);\n};\n\nconst _createGameBoardDOM = (player, callback, customId = null) => {\n   const size = player.ownBoard.getGrid().length;\n   const playerName = customId || player.name;\n   const gridContainer = document.createElement(\"div\");\n   gridContainer.classList.add(\"game-board\");\n   gridContainer.id = playerName;\n\n   for (let col = 0; col < size; col++) {\n      const colElement = document.createElement(\"div\");\n      colElement.classList.add(\"column\");\n\n      for (let row = 0; row < size; row++) {\n         const cell = document.createElement(\"div\");\n         cell.classList.add(\"cell\");\n         cell.dataset.row = row;\n         cell.dataset.col = col;\n         const isOccupied = player.ownBoard.hasShip(row, col);\n         if (player.name !== \"player-2\" && isOccupied) {\n            cell.classList.add(\"ship\");\n         }\n         cell.addEventListener(\"click\", () => callback(row, col, player));\n         colElement.appendChild(cell);\n      }\n      gridContainer.appendChild(colElement);\n   }\n\n   return gridContainer;\n};\n","import { player1, player2, runGame, placeShips } from \"./GameController\";\nimport { ShipPlacer } from \"./ShipPlacer\";\nimport {\n   renderGameBoards,\n   renderShipPlacementBoard,\n   updateCellContent,\n   updateGameOver,\n   updateDomOnTurn,\n   UpdateGameboardDOM,\n} from \"./DomController\";\n\nexport const initApp = () => {\n   renderGameBoards(player1, player2);\n   renderShipPlacementBoard(player1);\n};\n\nexport const handleShipClick = (row, col, player) => {\n   placeShips(row, col, player);\n   UpdateGameboardDOM(player);\n};\n\nexport const callUpdateGameboardDOM = (player) => UpdateGameboardDOM(player);\n\nexport const handleCellClick = (row, col) => {\n   row = Number(row);\n   col = Number(col);\n   runGame(row, col);\n};\n\nexport const passCellDisplayInfo = (row, col, player, isOccupied) =>\n   updateCellContent(row, col, player, isOccupied);\n\nexport const gameOver = () => {\n   updateGameOver();\n};\n\nexport const passTurnInfo = (turnInfo) => updateDomOnTurn(turnInfo);\n","export const ShipPlacer = (player) => {\n   const placeShipManually = (row, col, length, direction) => {\n      try {\n         player.ownBoard.placeShip(row, col, length, direction);\n         return true;\n      } catch (error) {\n         console.log(error.message);\n         return false;\n      }\n   };\n\n   const placeShipsRandomly = (ships) => {\n      ships.forEach((ship) => {\n         let placed = false;\n         while (!placed) {\n            const randomRow = Math.floor(Math.random() * player.ownBoard.size);\n            const randomCol = Math.floor(Math.random() * player.ownBoard.size);\n            const randomDirection = Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\n\n            try {\n               player.ownBoard.placeShip(randomRow, randomCol, ship.length, randomDirection);\n            } catch (error) {\n               // Retry with andom coords\n            }\n         }\n      });\n   };\n\n   return {\n      placeShipManually,\n      placeShipsRandomly,\n   };\n};\n"],"names":["Ship","length","direction","startRow","startCol","hits","getHits","hit","isSunk","Gameboard","size","board","Array","from","fill","ships","getCell","row","col","hasShip","getShip","index","Number","isInteger","undefined","placeShip","i","_isValidPlacement","Error","ship","shipIndex","push","newCol","getAllShips","receiveAttack","cell","console","log","isAllShipsSunken","every","getGrid","getShipPositions","map","getShipIndex","find","Player","name","ownBoard","cpuPlayer","state","lastHit","potentialTargets","attackedCells","Set","shipOrientation","attackDirection","currentShipLength","getState","setState","newState","getLastHit","setLastHit","coords","addPotentialTargets","targets","getNextTarget","shift","clearPotentialTargets","getPotentialTargets","markCellAsAttacked","add","hasCellBeenAttacked","has","getShipOrientation","setShipOrientation","orientation","getAttackDirection","setAttackDirection","getCurrentShipLength","setCurrentShipLength","resetCurrentShipLength","ComputerPlayer","player1","player2","currentShipIndex","armada","type","resetComputerPlayer","addTargetsAlongOrientation","leftCol","rightCol","upRow","downRow","_getAdjacentCells","filter","_randomizeCoords","randomRow","Math","floor","random","randomCol","runGame","opponent","takeTurns","getCurrentPlayer","result","passCellDisplayInfo","gameOver","swapTurns","nextTurn","passTurnInfo","setTimeout","shipToCheck","handleHuntMode","nextTarget","nextRow","nextCol","lastRow","lastCol","currentDirection","handleTargetMode","handleCpuTurn","currentPlayer","isPlayerTurn","player","UpdateGameboardDOM","originalGameboardElement","document","getElementById","popupGameboardElement","updateGameboardElement","gameboardElement","querySelector","isOccupied","classList","_createGameBoardDOM","callback","customId","playerName","gridContainer","createElement","id","colElement","dataset","addEventListener","appendChild","handleShipClick","shipPlacer","placeShipManually","error","message","placeShipsRandomly","forEach","randomDirection","vessel","callUpdateGameboardDOM","placeShips","handleCellClick","_getCellElement","remove","updateCellContent","overlay","announcementCard","announcement","textContent","closeButton","removeChild","_displayGameOver","turnInfo","player1Board","player2Board","updateDomOnTurn","container","player1GameboardDOM","player2GameboardDOM","append","renderGameBoards","popup","gameBoardDOM","closeBtn","renderShipPlacementBoard"],"sourceRoot":""}