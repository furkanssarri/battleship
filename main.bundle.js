(()=>{"use strict";const t=t=>{const e=Array.from({length:t},(()=>Array(t).fill(null))),o=[],n=(t,o)=>e[t][o],a=(t,e)=>null!==n(t,e),l=(t,n)=>{const a=e[t][n];return Number.isInteger(a)?o[a]:void 0};return{placeShip:(n,l,r,i)=>{if(!((e,o,n,l)=>{if("horizontal"===l&&o+n>t)return!1;if("vertical"===l&&e+n>t)return!1;for(let t=0;t<n;t++)if(a("vertical"===l?e+t:e,"horizontal"===l?o+t:o))return!1;return!0})(n,l,r,i))throw new Error("Invalid placement: Out of bounds or overlapping.");const s=((t,e,o,n)=>{let a=0;return{length:t,direction:e,startRow:o,startCol:n,getHits:()=>a,hit:()=>{++a},isSunk:()=>a>=t}})(r,i,n,l),c=o.length;o.push(s);for(let t=0;t<r;t++){const o="horizontal"===i?l+t:l;e["vertical"===i?n+t:n][o]=c}},getCell:n,hasShip:a,getShip:l,getAllShips:()=>[...o],receiveAttack:(t,o)=>{const a=n(t,o);if(null===a)return e[t][o]="X","X";if(Number.isInteger(a)){const n=l(t,o);if(n)return n.hit(),e[t][o]="H","H"}return console.log("Cell already attacked... Skipping..."),"Cell already attacked... Skipping..."},isAllShipsSunken:()=>o.every((t=>t.isSunk())),getGrid:()=>e,getShipPositions:()=>o.map((({startRow:t,startCol:e,length:o,direction:n})=>({startRow:t,startCol:e,length:o,direction:n}))),getShipIndex:(t,e)=>o.find((o=>{const{startRow:n,startCol:a,length:l,direction:r}=o;return"horizontal"===r?t===n&&e>=a&&e<a+l:e===a&&t>=n&&t<n+l}))||void 0}},e=e=>({name:e,ownBoard:t(10)}),o=(()=>{let t="hunt",e=null,o=[];const n=new Set;let a=null;return{getState:()=>t,setState:e=>t=e,getLastHit:()=>e,setLastHit:t=>e=t,addPotentialTargets:t=>o.push(...t),getNextTarget:()=>o.length>0?o.shift():null,clearPotentialTargets:()=>o=[],getPotentialTargets:()=>[...o],markCellAsAttacked:(t,e)=>n.add(`${t}, ${e}`),hasCellBeenAttacked:(t,e)=>n.has(`${t}, ${e}`),getShipOrientation:()=>a,setShipOrientation:t=>a=t}})(),n=e("player-1");n.ownBoard.placeShip(4,3,5,"horizontal"),n.ownBoard.placeShip(6,4,4,"vertical"),n.ownBoard.placeShip(2,1,3,"horizontal"),n.ownBoard.placeShip(1,8,2,"vertical"),n.ownBoard.placeShip(0,4,3,"horizontal"),n.ownBoard.placeShip(8,6,3,"horizontal");const a=e("player-2");a.ownBoard.placeShip(0,1,5,"horizontal"),a.ownBoard.placeShip(3,2,4,"vertical"),a.ownBoard.placeShip(7,5,3,"vertical"),a.ownBoard.placeShip(5,5,3,"horizontal"),a.ownBoard.placeShip(2,6,2,"horizontal"),a.ownBoard.placeShip(2,4,2,"vertical");const l=t=>{const{setState:e,setLastHit:o,setShipOrientation:n,clearPotentialTargets:a}=t;e("hunt"),o(null),n(null),a(),console.log("Computer player reset to hunt mode.")},r=(t,e)=>[{row:t-1,col:e},{row:t+1,col:e},{row:t,col:e-1},{row:t,col:e+1}].filter((({row:t,col:e})=>t>=0&&t<10&&e>=0&&e<10));const i=(t,e)=>{const c=s.getCurrentPlayer()===n?a:n,d=c.ownBoard.receiveAttack(t,e);h(t,e,c.name,d),c.ownBoard.isAllShipsSunken()&&p(),s.swapTurns();const m=s.getCurrentPlayer();return u(m),m===a&&setTimeout((()=>{(t=>{const e=s.getCurrentPlayer()===n?a:n,{getState:o}=t;"hunt"===o()?((t,e)=>{const{setState:o,setLastHit:n,addPotentialTargets:a,hasCellBeenAttacked:s,markCellAsAttacked:c}=t;let d,h;do{({randomRow:d,randomCol:h}={randomRow:Math.floor(10*Math.random()),randomCol:Math.floor(10*Math.random())})}while(s(d,h));const p=i(d,h);if(c(d,h),"H"===p){const i=e.ownBoard.getShipIndex(d,h);i&&i.isSunk()?(console.log(`Ship at (${d}, ${h}) is sunk! Resetting to hunt mode...`),l(t)):(o("target"),n(d,h),a(r(d,h)))}})(t,e):"target"===o()&&((t,e)=>{const{getNextTarget:o,getLastHit:n,setShipOrientation:a,getShipOrientation:r,hasCellBeenAttacked:s,markCellAsAttacked:c}=t;let d;do{d=o()}while(null!==d&&s(d.row,d.col));if(null!==d){const{row:o,col:s}=d,h=i(o,s);if(c(o,s),"H"===h){const i=e.ownBoard.getShipIndex(o,s);if(i&&i.isSunk())console.log(`Ship at (${o}, ${s}) is sunk! Resetting to hunt mode...`),l(t);else{if(null===r()){const{row:t,col:e}=n();o===t?a("horizontal"):s===e&&a("vertical"),console.log(`Detected ship orientation: ${r()}.`)}((t,e,o)=>{const{addPotentialTargets:n,getShipOrientation:a,hasCellBeenAttacked:l}=t;"horizontal"===a()?[{row:e,col:o-1},{row:e,col:o+1}].forEach((t=>{t.row>=0&&t.row<10&&t.col>=0&&t.col<10&&!l(t.row,t.col)&&n([t])})):"vertical"===a()&&[{row:e-1,col:o},{row:e+1,col:o}].forEach((t=>{t.row>=0&&t.row<10&&t.col>=0&&t.col<10&&!l(t.row,t.col)&&n([t])}))})(t,o,s)}}else"X"===h&&console.log("That's a miss! Waiting for the next computer player turn...")}else console.log("No more valid targets! Resetting to hunt mode..."),l(t)})(t,e)})(o)}),50),d},s=(()=>{let t=n;return{swapTurns:()=>t=t===n?a:n,getCurrentPlayer:()=>t,isPlayerTurn:e=>e===t}})(),c=(t,e)=>{const o=t.ownBoard.getGrid().length,n=t.name,a=document.createElement("div");a.classList.add("game-board"),a.id=n;for(let n=0;n<o;n++){const l=document.createElement("div");l.classList.add("column");for(let a=0;a<o;a++){const o=document.createElement("div");o.classList.add("cell"),o.dataset.row=a,o.dataset.col=n;const r=t.ownBoard.hasShip(a,n);"player-2"!==t.name&&r&&o.classList.add("ship"),o.addEventListener("click",(()=>e(a,n,t))),l.appendChild(o)}a.appendChild(l)}return a},d=(t,e)=>{t=Number(t),e=Number(e),i(t,e)},h=(t,e,o,n)=>((t,e,o,n)=>{const a=((t,e,o)=>document.getElementById(o).querySelector(`[data-row="${t}"][data-col="${e}"]`))(t,e,o);"H"===n?(a.classList.remove("ship"),a.classList.add("hit")):"X"===n&&a.classList.add("miss"),a.classList.add("disabled")})(t,e,o,n),p=()=>{(()=>{const t=document.createElement("div");t.classList.add("overlay");const e=document.createElement("div");e.classList.add("announcement-card");const o=document.createElement("h2");o.textContent="Game Over";const n=document.createElement("button");n.textContent="Close",n.addEventListener("click",(()=>{document.getElementById("root").removeChild(t)})),e.appendChild(o),e.appendChild(n),t.appendChild(e),document.getElementById("root").appendChild(t)})()},u=t=>(t=>{const e=document.querySelector("#player-1"),o=document.querySelector("#player-2");"player-1"===t.name?(e.classList.add("disabled"),o.classList.remove("disabled")):"player-2"===t.name&&(o.classList.add("disabled"),e.classList.remove("disabled"))})(t);((t,e)=>{const o=document.createElement("div");o.classList.add("container");const n=c(t,d),a=c(e,d);o.append(n,a),document.getElementById("root").appendChild(o)})(n,a)})();
//# sourceMappingURL=main.bundle.js.map