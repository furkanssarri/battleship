{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://battleship/./src/components/Ship.js","webpack://battleship/./src/components/Gameboard.js","webpack://battleship/./src/components/Player.js","webpack://battleship/./src/GameController.js","webpack://battleship/./src/components/ComputerPlayer.js","webpack://battleship/./src/DomController.js","webpack://battleship/./src/AppController.js"],"sourcesContent":["export const Ship = (length, direction, startRow, startCol) => {\n   let hits = 0;\n\n   const getHits = () => hits;\n   const hit = () => {\n      ++hits;\n   };\n   const isSunk = () => hits >= length;\n   return {\n      length,\n      direction,\n      startRow,\n      startCol,\n      getHits,\n      hit,\n      isSunk,\n   };\n};\n","import { Ship } from \"./Ship\";\n\nexport const Gameboard = (size) => {\n   const board = Array.from({ length: size }, () => Array(size).fill(null));\n   const ships = [];\n\n   const getCell = (row, col) => board[row][col];\n   const hasShip = (row, col) => getCell(row, col) !== null;\n   const getAllShips = () => [...ships];\n   const isAllShipsSunken = () => ships.every((ship) => ship.isSunk());\n   const getGrid = () => board;\n\n   const getShipPositions = () =>\n      ships.map(({ startRow, startCol, length, direction }) => ({\n         startRow,\n         startCol,\n         length,\n         direction,\n      }));\n\n   const getShipIndex = (row, col) => {\n      return (\n         ships.find((ship) => {\n            const { startRow, startCol, length, direction } = ship;\n            if (direction === \"horizontal\") {\n               return row === startRow && col >= startCol && col < startCol + length;\n            } else {\n               return col === startCol && row >= startRow && row < startRow + length;\n            }\n         }) || undefined\n      );\n   };\n\n   const getShip = (row, col) => {\n      const index = board[row][col];\n      return Number.isInteger(index) ? ships[index] : undefined;\n   };\n\n   const _isValidPlacement = (row, col, length, direction) => {\n      if (direction === \"horizontal\" && col + length > size) return false;\n      if (direction === \"vertical\" && row + length > size) return false;\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         if (hasShip(newRow, newCol)) return false;\n      }\n      return true;\n   };\n\n   const placeShip = (row, col, length, direction) => {\n      if (!_isValidPlacement(row, col, length, direction)) {\n         throw new Error(\"Invalid placement: Out of bounds or overlapping.\");\n      }\n\n      const ship = Ship(length, direction, row, col);\n      const shipIndex = ships.length;\n      ships.push(ship);\n\n      for (let i = 0; i < length; i++) {\n         const newRow = direction === \"vertical\" ? row + i : row;\n         const newCol = direction === \"horizontal\" ? col + i : col;\n         board[newRow][newCol] = shipIndex;\n      }\n   };\n\n   const receiveAttack = (row, col) => {\n      const cell = getCell(row, col);\n      if (cell === null) {\n         board[row][col] = \"X\"; // Missed shot\n         return \"X\";\n      }\n      if (Number.isInteger(cell)) {\n         const ship = getShip(row, col);\n         if (ship) {\n            ship.hit();\n            board[row][col] = \"H\";\n            return \"H\";\n         }\n      }\n      // throw new Error(\"This cell was already attacked.\");\n      console.log(\"Cell already attacked... Skipping...\");\n      return \"Cell already attacked... Skipping...\";\n   };\n\n   return {\n      placeShip,\n      getCell,\n      hasShip,\n      getShip,\n      getAllShips,\n      receiveAttack,\n      isAllShipsSunken,\n      getGrid,\n      getShipPositions,\n      getShipIndex,\n   };\n};\n","import { Gameboard } from \"./Gameboard\";\n\nexport const Player = (name) => {\n   const ownBoard = Gameboard(10);\n\n   return {\n      name,\n      ownBoard,\n   };\n};\n","import { Player } from \"./components/Player\";\nimport { ComputerPlayer } from \"./components/ComputerPlayer\";\nimport { gameOver, passCellDisplayInfo, passTurnInfo } from \"./AppController\";\n\nconst cpuPlayer = ComputerPlayer();\nexport const player1 = Player(\"player-1\");\n// player1.ownBoard.placeShip(4, 3, 2, \"horizontal\");\nplayer1.ownBoard.placeShip(4, 3, 5, \"horizontal\");\nplayer1.ownBoard.placeShip(6, 4, 4, \"vertical\");\nplayer1.ownBoard.placeShip(2, 1, 3, \"horizontal\");\nplayer1.ownBoard.placeShip(1, 8, 2, \"vertical\");\nplayer1.ownBoard.placeShip(0, 4, 3, \"horizontal\");\nplayer1.ownBoard.placeShip(8, 6, 3, \"horizontal\");\n// // additional ships for testing...\n// player1.ownBoard.placeShip(0, 0, 3, \"horizontal\");\n// player1.ownBoard.placeShip(1, 1, 6, \"horizontal\");\n// player1.ownBoard.placeShip(3, 1, 6, \"horizontal\");\n\nexport const player2 = Player(\"player-2\");\nplayer2.ownBoard.placeShip(0, 1, 5, \"horizontal\");\nplayer2.ownBoard.placeShip(3, 2, 4, \"vertical\");\nplayer2.ownBoard.placeShip(7, 5, 3, \"vertical\");\nplayer2.ownBoard.placeShip(5, 5, 3, \"horizontal\");\nplayer2.ownBoard.placeShip(2, 6, 2, \"horizontal\");\nplayer2.ownBoard.placeShip(2, 4, 2, \"vertical\");\n\n/* REFACTORING handleCpuTurn BEGINS */\n\nconst resetComputerPlayer = (cpuPlayer) => {\n   const { setState, setLastHit, setShipOrientation, clearPotentialTargets } = cpuPlayer;\n   setState(\"hunt\");\n   setLastHit(null);\n   setShipOrientation(null);\n   clearPotentialTargets();\n   console.log(\"Computer player reset to hunt mode.\");\n};\n\nconst addTargetsAlongOrientation = (cpuPlayer, row, col) => {\n   const { addPotentialTargets, getShipOrientation, hasCellBeenAttacked } = cpuPlayer;\n\n   if (getShipOrientation() === \"horizontal\") {\n      // Add cells to the left and right, skipping already-attacked cells\n      let leftCol = col - 1;\n      while (leftCol >= 0 && !hasCellBeenAttacked(row, leftCol)) {\n         addPotentialTargets([{ row, col: leftCol }]);\n         leftCol--;\n      }\n\n      let rightCol = col + 1;\n      while (rightCol < 10 && !hasCellBeenAttacked(row, rightCol)) {\n         addPotentialTargets([{ row, col: rightCol }]);\n         rightCol++;\n      }\n   } else if (getShipOrientation() === \"vertical\") {\n      // Add cells above and below, skipping already-attacked cells\n      let upRow = row - 1;\n      while (upRow >= 0 && !hasCellBeenAttacked(upRow, col)) {\n         addPotentialTargets([{ row: upRow, col }]);\n         upRow--;\n      }\n\n      let downRow = row + 1;\n      while (downRow < 10 && !hasCellBeenAttacked(downRow, col)) {\n         addPotentialTargets([{ row: downRow, col }]);\n         downRow++;\n      }\n   }\n};\n\nconst handleHuntMode = (cpuPlayer, opponent) => {\n   const {\n      setState,\n      setLastHit,\n      getLastHit,\n      addPotentialTargets,\n      hasCellBeenAttacked,\n      markCellAsAttacked,\n   } = cpuPlayer;\n\n   let randomRow, randomCol;\n   do {\n      ({ randomRow, randomCol } = _randomizeCoords());\n   } while (hasCellBeenAttacked(randomRow, randomCol));\n\n   const result = runGame(randomRow, randomCol);\n   markCellAsAttacked(randomRow, randomCol);\n\n   if (result === \"H\") {\n      const shipToCheck = opponent.ownBoard.getShipIndex(randomRow, randomCol);\n      if (shipToCheck && shipToCheck.isSunk()) {\n         console.log(`Ship at (${randomRow}, ${randomCol}) is sunk! Resetting to hunt mode...`);\n         resetComputerPlayer(cpuPlayer);\n      } else {\n         setState(\"target\");\n         setLastHit({ row: randomRow, col: randomCol });\n         console.log(`Last hit: `, getLastHit());\n         addPotentialTargets(_getAdjacentCells(randomRow, randomCol));\n      }\n   }\n};\n\nconst handleTargetMode = (cpuPlayer, opponent) => {\n   const {\n      getNextTarget,\n      getLastHit,\n      setShipOrientation,\n      getShipOrientation,\n      hasCellBeenAttacked,\n      markCellAsAttacked,\n   } = cpuPlayer;\n\n   let nextTarget;\n   do {\n      nextTarget = getNextTarget();\n   } while (nextTarget !== null && hasCellBeenAttacked(nextTarget.row, nextTarget.col));\n\n   if (nextTarget !== null) {\n      const { row: nextRow, col: nextCol } = nextTarget;\n      const result = runGame(nextRow, nextCol);\n      markCellAsAttacked(nextRow, nextCol);\n\n      if (result === \"H\") {\n         const shipToCheck = opponent.ownBoard.getShipIndex(nextRow, nextCol);\n         if (shipToCheck && shipToCheck.isSunk()) {\n            console.log(`Ship at (${nextRow}, ${nextCol}) is sunk! Resetting to hunt mode...`);\n            resetComputerPlayer(cpuPlayer);\n         } else {\n            if (getShipOrientation() === null) {\n               const { row: lastRow, col: lastCol } = getLastHit();\n               if (nextRow === lastRow) {\n                  setShipOrientation(\"horizontal\");\n               } else if (nextCol === lastCol) {\n                  setShipOrientation(\"vertical\");\n               }\n               console.log(`Detected ship orientation: ${getShipOrientation()}.`);\n            }\n            addTargetsAlongOrientation(cpuPlayer, nextRow, nextCol);\n         }\n      } else if (result === \"X\") {\n         console.log(\"That's a miss! Waiting for the next computer player turn...\");\n      }\n   } else {\n      console.log(\"No more valid targets! Resetting to hunt mode...\");\n      resetComputerPlayer(cpuPlayer);\n   }\n};\n\nexport const handleCpuTurn = (cpuPlayer) => {\n   const currentPlayer = takeTurns.getCurrentPlayer();\n   const opponent = currentPlayer === player1 ? player2 : player1;\n   const { getState } = cpuPlayer;\n\n   if (getState() === \"hunt\") {\n      handleHuntMode(cpuPlayer, opponent);\n   } else if (getState() === \"target\") {\n      handleTargetMode(cpuPlayer, opponent);\n   }\n};\n\n/* REFACTORING handleCpuTurn ENDS */\n\nconst _getAdjacentCells = (row, col) => {\n   return [\n      { row: row - 1, col }, // Up\n      { row: row + 1, col }, // Down\n      { row, col: col - 1 }, // Left\n      { row, col: col + 1 }, // Right\n   ].filter(({ row, col }) => row >= 0 && row < 10 && col >= 0 && col < 10); // Filter out-of-bounds cells\n};\n\nfunction _randomizeCoords() {\n   const randomRow = Math.floor(Math.random() * 10);\n   const randomCol = Math.floor(Math.random() * 10);\n   return { randomRow, randomCol };\n}\nfunction _checkIfCellWasAttacked(row, col, player) {\n   if (player.ownBoard.getCell(row, col) === \"X\" || player.ownBoard.getCell(row, col) === \"H\") {\n      return true;\n   }\n   return false;\n}\n\nexport const runGame = (row, col) => {\n   const currentPlayer = takeTurns.getCurrentPlayer();\n   const opponent = currentPlayer === player1 ? player2 : player1;\n   const result = opponent.ownBoard.receiveAttack(row, col);\n\n   passCellDisplayInfo(row, col, opponent.name, result);\n\n   if (opponent.ownBoard.isAllShipsSunken()) gameOver();\n\n   takeTurns.swapTurns();\n   const nextTurn = takeTurns.getCurrentPlayer();\n   passTurnInfo(nextTurn);\n\n   if (nextTurn === player2) {\n      setTimeout(() => {\n         handleCpuTurn(cpuPlayer);\n      }, 50);\n   }\n   return result;\n};\n\nconst takeTurns = (() => {\n   let currentPlayer = player1;\n\n   const swapTurns = () => (currentPlayer = currentPlayer === player1 ? player2 : player1);\n   const getCurrentPlayer = () => currentPlayer;\n   const isPlayerTurn = (player) => player === currentPlayer;\n\n   return {\n      swapTurns,\n      getCurrentPlayer,\n      isPlayerTurn,\n   };\n})();\n","export const ComputerPlayer = () => {\n   let state = \"hunt\";\n   let lastHit = null;\n   let potentialTargets = [];\n   const attackedCells = new Set();\n   let shipOrientation = null;\n\n   const getState = () => state;\n   const setState = (newState) => (state = newState);\n   const getLastHit = () => lastHit;\n   const setLastHit = (coords) => (lastHit = coords);\n   const addPotentialTargets = (targets) => potentialTargets.push(...targets);\n   const clearPotentialTargets = () => (potentialTargets = []);\n   const getNextTarget = () => (potentialTargets.length > 0 ? potentialTargets.shift() : null);\n   const getPotentialTargets = () => [...potentialTargets];\n   const markCellAsAttacked = (row, col) => attackedCells.add(`${row}, ${col}`);\n   const hasCellBeenAttacked = (row, col) => attackedCells.has(`${row}, ${col}`);\n   const getShipOrientation = () => shipOrientation;\n   const setShipOrientation = (orientation) => (shipOrientation = orientation);\n\n   return {\n      getState,\n      setState,\n      getLastHit,\n      setLastHit,\n      addPotentialTargets,\n      getNextTarget,\n      clearPotentialTargets,\n      getPotentialTargets,\n      markCellAsAttacked,\n      hasCellBeenAttacked,\n      getShipOrientation,\n      setShipOrientation,\n   };\n};\n","import { handleCellClick } from \"./AppController\";\n\nexport const renderGameBoards = (player1, player2) => {\n   const container = document.createElement(\"div\");\n   container.classList.add(\"container\");\n\n   const player1GameboardDOM = _createGameBoardDOM(player1, handleCellClick);\n   const player2GameboardDOM = _createGameBoardDOM(player2, handleCellClick);\n   container.append(player1GameboardDOM, player2GameboardDOM);\n\n   document.getElementById(\"root\").appendChild(container);\n};\n\nexport const updateCellContent = (row, col, playerName, isOccupied) => {\n   const cell = _getCellElement(row, col, playerName);\n   if (isOccupied === \"H\") {\n      cell.classList.remove(\"ship\");\n      cell.classList.add(\"hit\");\n   } else if (isOccupied === \"X\") {\n      cell.classList.add(\"miss\");\n   }\n   cell.classList.add(\"disabled\");\n};\n\nexport const updateDomOnTurn = (turnInfo) => {\n   const player1Board = document.querySelector(\"#player-1\");\n   const player2Board = document.querySelector(\"#player-2\");\n\n   if (turnInfo.name === \"player-1\") {\n      player1Board.classList.add(\"disabled\");\n      player2Board.classList.remove(\"disabled\");\n   } else if (turnInfo.name === \"player-2\") {\n      player2Board.classList.add(\"disabled\");\n      player1Board.classList.remove(\"disabled\");\n   }\n};\n\nexport const updateGameOver = () => {\n   _displayGameOver();\n};\n\nconst _getCellElement = (row, col, playerName) => {\n   const gameboard = document.getElementById(playerName);\n   return gameboard.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n};\n\nconst _displayGameOver = () => {\n   const overlay = document.createElement(\"div\");\n   overlay.classList.add(\"overlay\");\n\n   const announcementCard = document.createElement(\"div\");\n   announcementCard.classList.add(\"announcement-card\");\n\n   const announcement = document.createElement(\"h2\");\n   announcement.textContent = \"Game Over\";\n\n   const closeButton = document.createElement(\"button\");\n   closeButton.textContent = \"Close\";\n   closeButton.addEventListener(\"click\", () => {\n      document.getElementById(\"root\").removeChild(overlay);\n   });\n\n   announcementCard.appendChild(announcement);\n   announcementCard.appendChild(closeButton);\n   overlay.appendChild(announcementCard);\n   document.getElementById(\"root\").appendChild(overlay);\n};\n\nconst _createGameBoardDOM = (player, callback) => {\n   const size = player.ownBoard.getGrid().length;\n   const playerName = player.name;\n   const gridContainer = document.createElement(\"div\");\n   gridContainer.classList.add(\"game-board\");\n   gridContainer.id = playerName;\n\n   for (let col = 0; col < size; col++) {\n      const colElement = document.createElement(\"div\");\n      colElement.classList.add(\"column\");\n\n      for (let row = 0; row < size; row++) {\n         const cell = document.createElement(\"div\");\n         cell.classList.add(\"cell\");\n         cell.dataset.row = row;\n         cell.dataset.col = col;\n         const isOccupied = player.ownBoard.hasShip(row, col);\n         if (player.name !== \"player-2\" && isOccupied) {\n            cell.classList.add(\"ship\");\n         }\n         cell.addEventListener(\"click\", () => callback(row, col, player));\n         colElement.appendChild(cell);\n      }\n      gridContainer.appendChild(colElement);\n   }\n\n   return gridContainer;\n};\n","import { player1, player2, runGame } from \"./GameController\";\nimport {\n   renderGameBoards,\n   updateCellContent,\n   updateGameOver,\n   updateDomOnTurn,\n} from \"./DomController\";\n\nexport const initApp = () => {\n   renderGameBoards(player1, player2);\n};\n\nexport const handleCellClick = (row, col) => {\n   row = Number(row);\n   col = Number(col);\n   runGame(row, col);\n};\n\nexport const passCellDisplayInfo = (row, col, player, isOccupied) =>\n   updateCellContent(row, col, player, isOccupied);\n\nexport const gameOver = () => {\n   updateGameOver();\n};\n\nexport const passTurnInfo = (turnInfo) => updateDomOnTurn(turnInfo);\n"],"names":["Gameboard","size","board","Array","from","length","fill","ships","getCell","row","col","hasShip","getShip","index","Number","isInteger","undefined","placeShip","direction","i","_isValidPlacement","Error","ship","startRow","startCol","hits","getHits","hit","isSunk","Ship","shipIndex","push","newCol","getAllShips","receiveAttack","cell","console","log","isAllShipsSunken","every","getGrid","getShipPositions","map","getShipIndex","find","Player","name","ownBoard","cpuPlayer","state","lastHit","potentialTargets","attackedCells","Set","shipOrientation","getState","setState","newState","getLastHit","setLastHit","coords","addPotentialTargets","targets","getNextTarget","shift","clearPotentialTargets","getPotentialTargets","markCellAsAttacked","add","hasCellBeenAttacked","has","getShipOrientation","setShipOrientation","orientation","ComputerPlayer","player1","player2","resetComputerPlayer","_getAdjacentCells","filter","runGame","opponent","takeTurns","getCurrentPlayer","result","passCellDisplayInfo","gameOver","swapTurns","nextTurn","passTurnInfo","setTimeout","randomRow","randomCol","Math","floor","random","shipToCheck","handleHuntMode","nextTarget","nextRow","nextCol","lastRow","lastCol","leftCol","rightCol","upRow","downRow","addTargetsAlongOrientation","handleTargetMode","handleCpuTurn","currentPlayer","isPlayerTurn","player","_createGameBoardDOM","callback","playerName","gridContainer","document","createElement","classList","id","colElement","dataset","isOccupied","addEventListener","appendChild","handleCellClick","getElementById","querySelector","_getCellElement","remove","updateCellContent","overlay","announcementCard","announcement","textContent","closeButton","removeChild","_displayGameOver","turnInfo","player1Board","player2Board","updateDomOnTurn","container","player1GameboardDOM","player2GameboardDOM","append","renderGameBoards"],"sourceRoot":""}